#!/usr/bin/env python

"""
Proxy for the octomap data.
Transmit the data from the octomap server, and
sometimes creates an obstacle to test the replanification system.
"""

import rospy, numpy as np
from std_msgs.msg import Header
from autopilot.msg import BoundingBox
from visualization_msgs.msg import MarkerArray, Marker
from geometry_msgs.msg import Point


rospy.init_node('octomap_proxy', anonymous=True)
rate = rospy.Rate(10)
pub = rospy.Publisher('/autopilot/octomap_update', BoundingBox, queue_size=2)
viz_pub = rospy.Publisher('/autopilot/octomap_update_viz', Marker, queue_size=2)

rate.sleep()

bbmin = np.array([3, -5, 0])
bbmax = np.array([6, -4, 2])

msg = BoundingBox()

msg.header.stamp = rospy.Time.now()
msg.header.frame_id = 'map'

msg.min.x = bbmin[0]
msg.min.y = bbmin[1]
msg.min.z = bbmin[2]

msg.max.x = bbmax[0]
msg.max.y = bbmax[1]
msg.max.z = bbmax[2]

msg.n = 20 * np.max(np.abs(bbmax - bbmin))

# Visualization
marker = Marker()
marker.header.frame_id = '/map'
marker.id = 0
marker.ns = ''
marker.action = Marker.ADD
marker.pose.orientation.w = 1.0
marker.type = Marker.CUBE_LIST

dist = np.abs(bbmax - bbmin)

marker.scale.x = dist[0]
marker.scale.y = dist[1]
marker.scale.z = dist[2]
marker.color.r = 1
# marker.color.g = color[1]
# marker.color.b = color[2]
marker.color.a = 1

pt = Point()
pt.x, pt.y, pt.z = (bbmax + bbmin) / 2.
marker.points.append(pt)

start = rospy.Time.now()
pub.publish(msg)
while not rospy.is_shutdown() and (rospy.Time.now() - start).to_sec() < 2:
    viz_pub.publish(marker)
    rate.sleep()